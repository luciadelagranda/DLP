
PLANTILLAS EXECUTE
------------------------------------------------

EXECUTE[[PROGRAM : Program -> Definition*]]()

	for(Definition d:Definition)
		if(def instanceof VarDefinition)
			EXECUTE[[def]]()
		
	<CALL MAIN>
	<HALT>

	for(Definition def:Definition)
		if(def instanceof FunDefinition)
			EXECUTE[[def]]()
_________________________________________________

EXECUTE[[WRITE: Statement -> Expression]] ()

	VALUE[[Expression]]()
	<OUT> Expression.Type.Suffix()
_________________________________________________

EXECUTE[[READ: Statement -> Expression]] ()
	
	ADDRESS[[Expression]]()
	<IN> Expression.Type.Suffix()
	<STORE> Expression.Type.Suffix()

_________________________________________________

EXECUTE[[ASSIGMENT: Statement -> Expression Expression2] ()

	ADDRESS[[Expression]]()
	VALUE[[Expression2]]()
	cg.convertion(Expression2.Type,Expression.Type)
	<STORE> Expression.Type.Suffix()
	
_________________________________________________

EXECUTE[[FUNDEFINITION: Definition -> Type Statement*]] ()

	Definition.Name <:>
	<ENTER> Definition.bytesLocales
	for(Statement s:Statement*)
		if(!s instanceof VarDefinition)
			EXECUTE[[s]]()
	if(Type.ReturnType instanceof VoidType)
		<RET> 0 <,> Definition.bytesLocales <,> Definition.bytesParametros
		
_________________________________________________

EXECUTE[[WHILESTATEMENT: Statement -> Expression Statement*]] ()
	
	int label =  cg.getLabels(2);
	<LABEL> label <:>
	VALUE[[Expression]]
	<JZ><LABEL> label+1
	for(Statement s:Statement*)
		EXECUTE[[s]]()
	<JMP><LABEL> label
	<LABEL> label+1 <:>

_________________________________________________

EXECUTE[[IFSTATEMENT: Statement	-> Expression stm:Statement* stm2:Statement*]] ()

	int label =  cg.getLabels(2);
	VALUE[[Expression]]()
	<JZ><LABEL> label
	for(Statement s:stm)
		EXECUTE[[s]]()	
	<JMP><LABEL> label+1
	<LABEL> label <:>	
	for(Statement s:stm2)
		EXECUTE[[s]]()
	<LABEL> label+1 <:>
	
_________________________________________________

EXECUTE[[INVOCATION: Statement -> Variable Expression*]] ()
	
	VALUE[[ (Expressionression) Statement]]()
	if(Variable.Type.ReturnType != IO.VoidType)
		<POP> Variable.Type.ReturnType.Suffix();

_________________________________________________

EXECUTE[[RETURN: Statement -> Expression]] Param -> (FunDefinition) ()

	VALUE[[Expression]]()
	cg.convertion(Expression.Type,FunDefinition.Type.ReturnType);
	<RET> FunDefinition.ReturnType.NumberBytes <,> FunDefinition.bytesLocales <,> FunDefinition.bytesParametros
	

------------------------------------------------
PLANTILLAS ADDRESS
------------------------------------------------

ADDRESS[[VARIABLE: Expression -> ID]] ()

	if(Expression.Definition.scope == 0)
		<PUSHA> Expression.Definition.Offset
	else
		<PUSH BP>
		<PUSHI> Expression.Definition.Offset
		<ADDI>
_________________________________________________

ADDRESS[[INDEXING: Expression -> Expression2 Expression3 ]] ()

	ADDRESS[[Expression2]]()
	VALUE[[Expression3]]()
	<PUSH> Expression.Type.NumberBytes()
	<MUL>
	<ADD>

_________________________________________________

ADDRESS[[FIELDACCESS: Expression -> Expression2 ID]] ()
	
	ADDRESS[[Expression2]]
	<PUSH> Expression2.Type.get(ID).Offset
	<ADD>
	
------------------------------------------------
PLANTILLAS VALUE
------------------------------------------------

VALUE[[INTLITERAL: Expression -> Int_Constant]] ()

	<PUSHI> Expression.value
_________________________________________________

VALUE[[CHARLITERAL: Expression -> Char_Constant]] ()

	<PUSHB> Expression.value
_________________________________________________

VALUE[[REALLITERAL: Expression -> Real_Constant]] ()

	<PUSHF> Expression.value

_________________________________________________

VALUE[[VARIABLE: Expression -> ID]] ()
	
	ADDRESS[[Expression]]()
	<LOAD> Expression.Type.Suffix() 
_________________________________________________

VALUE[[ARITHMETIC: Expression -> Expression2 Expression3 ]] () ??

	VALUE[[Expression2]]()
	supertype = Expression2.Type.SuperType(Expression3.Type)
	cg.convertion(Expression2.Type,supertype)
	VALUE[[Expression3]]()
	cg.convertion(Expression3.Type,supertype)
	cg.comparison(Expression.operator,supertype)
	
_________________________________________________

VALUE[[INDEXING: Expression -> Expression2 Expression3 ]] ()
	
	ADDRESS[[Expression]]()
	<LOAD>Expression.Type.Suffix()
_________________________________________________

VALUE[[FIELDACCES: Expression -> Expression2 ID]] ()

	ADDRESS[[Expression]]()
	<LOAD>Expression.Type.Suffix()
_________________________________________________

VALUE[[COMPARISON: Expression -> Expression2 Expression3 ]] ()

	VALUE[[Expression2]]()
	supertype = Expression2.Type.SuperType(Expression3.Type)
	cg.convertion(Expression2.Type,supertype)
	VALUE[[Expression3]]()
	cg.convertion(Expression3.Type,supertype)
	cg.comparison(Expression.operator,supertype)
	
_________________________________________________

VALUE[[UNARYNOT: Expression -> Expression2]] ()

	VALUE[[Expression2]]()
	<NOT>

_________________________________________________

VALUE[[UNARYMINUS: Expression -> Expression2]] ()

	VALUE[[Expression2]]()
	<PUSHI> -1
	cg.convertion(IO.IntType, Expression2.Type);
	<MUL> Expression2.operand.Type
	
_________________________________________________

VALUE[[INVOCATION: Expression -> Variable Expression*]]
	
	int i=0;
	for(Expressionression Expression:Expression*)
		VALUE[[Expression]]()
		cg.convertion(Expression.Type,Variable.Type.parameters[i++].Type)
	<CALL> Variable.Name
	
_________________________________________________

VALUE[[CAST: Expression -> CastType Expression2]]

	VALUE[[Expression2]]()
	cg.cast(Expression2.Type, CastType)
	
_________________________________________________

VALUE[[LOGICAL: Expression -> Expression2 Expression3 ]]
	
	VALUE[[Expression2]]()
	VALUE[[Expression3]]()
	cg.logica(Expression.operator)
	
